// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: student.proto

#ifndef PROTOBUF_student_2eproto__INCLUDED
#define PROTOBUF_student_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace test {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_student_2eproto();
void protobuf_AssignDesc_student_2eproto();
void protobuf_ShutdownFile_student_2eproto();

class Student;
class Student_Advisor;

// ===================================================================

class Student_Advisor : public ::google::protobuf::Message {
 public:
  Student_Advisor();
  virtual ~Student_Advisor();

  Student_Advisor(const Student_Advisor& from);

  inline Student_Advisor& operator=(const Student_Advisor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Student_Advisor& default_instance();

  void Swap(Student_Advisor* other);

  // implements Message ----------------------------------------------

  Student_Advisor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Student_Advisor& from);
  void MergeFrom(const Student_Advisor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:test.Student.Advisor)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_student_2eproto();
  friend void protobuf_AssignDesc_student_2eproto();
  friend void protobuf_ShutdownFile_student_2eproto();

  void InitAsDefaultInstance();
  static Student_Advisor* default_instance_;
};
// -------------------------------------------------------------------

class Student : public ::google::protobuf::Message {
 public:
  Student();
  virtual ~Student();

  Student(const Student& from);

  inline Student& operator=(const Student& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Student& default_instance();

  void Swap(Student* other);

  // implements Message ----------------------------------------------

  Student* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Student& from);
  void MergeFrom(const Student& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Student_Advisor Advisor;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string phone = 3;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 3;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // required float gpa = 4;
  inline bool has_gpa() const;
  inline void clear_gpa();
  static const int kGpaFieldNumber = 4;
  inline float gpa() const;
  inline void set_gpa(float value);

  // optional .test.Student.Advisor advisor = 5;
  inline bool has_advisor() const;
  inline void clear_advisor();
  static const int kAdvisorFieldNumber = 5;
  inline const ::test::Student_Advisor& advisor() const;
  inline ::test::Student_Advisor* mutable_advisor();
  inline ::test::Student_Advisor* release_advisor();
  inline void set_allocated_advisor(::test::Student_Advisor* advisor);

  // @@protoc_insertion_point(class_scope:test.Student)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_gpa();
  inline void clear_has_gpa();
  inline void set_has_advisor();
  inline void clear_has_advisor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* phone_;
  ::google::protobuf::int32 id_;
  float gpa_;
  ::test::Student_Advisor* advisor_;
  friend void  protobuf_AddDesc_student_2eproto();
  friend void protobuf_AssignDesc_student_2eproto();
  friend void protobuf_ShutdownFile_student_2eproto();

  void InitAsDefaultInstance();
  static Student* default_instance_;
};
// ===================================================================


// ===================================================================

// Student_Advisor

// required string name = 1;
inline bool Student_Advisor::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Student_Advisor::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Student_Advisor::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Student_Advisor::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Student_Advisor::name() const {
  // @@protoc_insertion_point(field_get:test.Student.Advisor.name)
  return *name_;
}
inline void Student_Advisor::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:test.Student.Advisor.name)
}
inline void Student_Advisor::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:test.Student.Advisor.name)
}
inline void Student_Advisor::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.Student.Advisor.name)
}
inline ::std::string* Student_Advisor::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:test.Student.Advisor.name)
  return name_;
}
inline ::std::string* Student_Advisor::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Student_Advisor::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:test.Student.Advisor.name)
}

// required int32 id = 2;
inline bool Student_Advisor::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Student_Advisor::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Student_Advisor::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Student_Advisor::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Student_Advisor::id() const {
  // @@protoc_insertion_point(field_get:test.Student.Advisor.id)
  return id_;
}
inline void Student_Advisor::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:test.Student.Advisor.id)
}

// -------------------------------------------------------------------

// Student

// required string name = 1;
inline bool Student::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Student::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Student::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Student::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Student::name() const {
  // @@protoc_insertion_point(field_get:test.Student.name)
  return *name_;
}
inline void Student::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:test.Student.name)
}
inline void Student::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:test.Student.name)
}
inline void Student::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.Student.name)
}
inline ::std::string* Student::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:test.Student.name)
  return name_;
}
inline ::std::string* Student::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Student::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:test.Student.name)
}

// required int32 id = 2;
inline bool Student::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Student::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Student::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Student::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Student::id() const {
  // @@protoc_insertion_point(field_get:test.Student.id)
  return id_;
}
inline void Student::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:test.Student.id)
}

// optional string phone = 3;
inline bool Student::has_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Student::set_has_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Student::clear_has_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Student::clear_phone() {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& Student::phone() const {
  // @@protoc_insertion_point(field_get:test.Student.phone)
  return *phone_;
}
inline void Student::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set:test.Student.phone)
}
inline void Student::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:test.Student.phone)
}
inline void Student::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.Student.phone)
}
inline ::std::string* Student::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:test.Student.phone)
  return phone_;
}
inline ::std::string* Student::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Student::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:test.Student.phone)
}

// required float gpa = 4;
inline bool Student::has_gpa() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Student::set_has_gpa() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Student::clear_has_gpa() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Student::clear_gpa() {
  gpa_ = 0;
  clear_has_gpa();
}
inline float Student::gpa() const {
  // @@protoc_insertion_point(field_get:test.Student.gpa)
  return gpa_;
}
inline void Student::set_gpa(float value) {
  set_has_gpa();
  gpa_ = value;
  // @@protoc_insertion_point(field_set:test.Student.gpa)
}

// optional .test.Student.Advisor advisor = 5;
inline bool Student::has_advisor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Student::set_has_advisor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Student::clear_has_advisor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Student::clear_advisor() {
  if (advisor_ != NULL) advisor_->::test::Student_Advisor::Clear();
  clear_has_advisor();
}
inline const ::test::Student_Advisor& Student::advisor() const {
  // @@protoc_insertion_point(field_get:test.Student.advisor)
  return advisor_ != NULL ? *advisor_ : *default_instance_->advisor_;
}
inline ::test::Student_Advisor* Student::mutable_advisor() {
  set_has_advisor();
  if (advisor_ == NULL) advisor_ = new ::test::Student_Advisor;
  // @@protoc_insertion_point(field_mutable:test.Student.advisor)
  return advisor_;
}
inline ::test::Student_Advisor* Student::release_advisor() {
  clear_has_advisor();
  ::test::Student_Advisor* temp = advisor_;
  advisor_ = NULL;
  return temp;
}
inline void Student::set_allocated_advisor(::test::Student_Advisor* advisor) {
  delete advisor_;
  advisor_ = advisor;
  if (advisor) {
    set_has_advisor();
  } else {
    clear_has_advisor();
  }
  // @@protoc_insertion_point(field_set_allocated:test.Student.advisor)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_student_2eproto__INCLUDED
